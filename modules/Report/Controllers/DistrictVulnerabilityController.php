<?php

namespace Modules\Report\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Modules\Configuration\Repositories\DistrictRepository;
use Modules\Configuration\Repositories\LocalLevelRepository;
use Modules\Report\Models\DistrictVulnerability;
use Modules\Report\Requests\DistrictVulnerability\StoreRequest;
use Modules\Report\Requests\DistrictVulnerability\UpdateRequest;
use Illuminate\Support\Facades\Log;
use Modules\Report\Repositories\PriorityRepository;
use Modules\Report\Repositories\StepRemarksRepository;
use App\Traits\StageStatus;
class DistrictVulnerabilityController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @param  DistrictRepository $districts
     * @return void
     */
    protected $districts, $lgid, $districtVulnerability, $stepRemarks,$priorities;
    use StageStatus;

    public function __construct(

        DistrictRepository $districts,
        LocalLevelRepository $lgid,
        DistrictVulnerability $districtVulnerability,
        StepRemarksRepository $stepRemarks,
        PriorityRepository $priorities,

    ) {
        $this->lgid = $lgid;
        $this->districts = $districts;
        $this->lgid = $lgid;
        $this->districtVulnerability = $districtVulnerability;
        $this->stepRemarks = $stepRemarks;
        $this->priorities = $priorities;
    }

    /**
     * Display a listing of the account codes.
     *
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function index(Request $request)
    {
        if ($request->has('did') && $request->input('did') != '') {
            $did = $request->query('did');
            $districtVulnerability = $this->districtVulnerability->with(['locallevel'])->where('district_id', $did)->get();
            $statuses = $this->getStatuses($did);
            if ($districtVulnerability->isEmpty()) {
                return redirect()->route('dataentrystage.create', ['stageId' => 1, 'did' => $did]); // Replace 'another.route.name' with the actual route name
            }            
            $districtprofile = $this->districts->with(['province','locallevel'])->find($did);
            $stepRemarks = $this->stepRemarks->where('district_id', '=', $did)->where('stage_id', '=', 1)->first();            
           
            return view('Report::DistrictContext.index')
                ->withDistrictVulnerability($districtVulnerability)
                ->withStepRemarks($stepRemarks)
                ->withPrioritystatus($statuses['prioritystatus'])
                ->withDistrictprofile($districtprofile);
        } else {

            return redirect()->route('district.index')->with('failed', 'Unable to submit priority!');
        }
    }

    /**
     * Show the form for creating a new account head.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        
    }

    /**
     * Store a newly created category in storage.
     *
     * @param  \Modules\Configuration\Requests\District\StoreRequest $request
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function store(StoreRequest $request)
    {


        $data = $request->except(['vulnerable_municipality', 'ecological_zone', 'municipality_count']);
        $districtdata = $request->only(['vulnerable_municipality', 'ecological_zone']);
     
        $updatedistrict = $this->districts->update($data['district_id'], $districtdata);
        
        $remarks = $this->stepRemarks->create([
            'district_id' => $data['district_id'], 
            'notes' => $data['notes'],
            'stage_status' => 1,
            'province_id' => $data['province_id'],
            'stage_id' => 1
        ]);

        if ($updatedistrict) {

            $municipalities = $data['lgid'] ?? [];
            $remoteStatuses = $data['remote_status'] ?? [];
            $religionStatuses = $data['religion_status'] ?? [];
            $geographyStatuses = $data['geography_status'] ?? [];
            $wealthStatuses = $data['wealth_status'] ?? [];
            $casteEthnicityStatuses = $data['caste_ethnicity_status'] ?? [];
            $foodSecurityStatuses = $data['food_security_status'] ?? [];
            $climaticChangeStatuses = $data['climatic_change_status'] ?? [];
            $remarks = $data['remark'] ?? [];

            // Ensure all arrays have the same length
            $maxLength = max(count($municipalities), count($remoteStatuses), count($geographyStatuses), count($wealthStatuses), count($casteEthnicityStatuses), count($foodSecurityStatuses), count($climaticChangeStatuses), count($remarks));

            // Loop through the 'lgid' array
            foreach ($municipalities as $index => $municipalityId) {
                $inputs = [
                    'district_id' => $data['district_id'] ?? null,
                    'lgid' => $municipalityId,
                    'remote_status' => $remoteStatuses[$index] ?? 0,
                    'religion_status' => $religionStatuses[$index] ?? 0,
                    'geography_status' => $geographyStatuses[$index] ?? 0,
                    'wealth_status' => $wealthStatuses[$index] ?? 0,
                    'caste_ethnicity_status' => $casteEthnicityStatuses[$index] ?? 0,
                    'food_security_status' => $foodSecurityStatuses[$index] ?? 0,
                    'climatic_change_status' => $climaticChangeStatuses[$index] ?? 0,
                    'remarks' => $remarks[$index] ?? '',
                ];

                // Create the record
                $this->districtVulnerability->create($inputs);
            }
        }


        return redirect()->route('districtvulnerability.index', ['stageId' => 1, 'did' => $data['district_id']])
            ->with('success', 'District vulnerability data saved successfully!');
    }

    /**
     * Display the specified account head.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $District = $this->districts->find($id);
        return response()->json(['status' => 'ok', 'district' => $district], 200);
    }

    /**
     * Show the form for editing the specified account head.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function edit($id)
    {
        // $this->authorize('manage-account-code');
        $provinces = $this->provinces->all()->mapWithKeys(function ($province) {
            return [$province->id => $province->province];
        })->toArray();

        return view('Configuration::District.edit')
            ->withDistrict($this->districts->find($id))
            ->withProvinces($provinces);
    }

    /**
     * Update the specified account head in storage.
     *
     * @param  \Modules\Configuration\Requests\District\UpdateRequest $request
     * @param  int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function update(UpdateRequest $request, $id)
    {
        // $this->authorize('manage-account-code');


        $District = $this->districts->update($id, $request->except('id'));

        if ($District) {
            return redirect()->route('district.index')->with('success', 'District Updated successfully!');
        }
        return response()->json([
            'status' => 'error',
            'message' => 'Account Code can not be updated.'
        ], 422);
    }

    /**
     * Remove the specified account head from storage.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function destroy($id)
    {
        // $this->authorize('manage-account-code');
        $flag = $this->districts->destroy($id);
        if ($flag) {
            return redirect()->route('district.index')->with('success', 'District is successfully deleted.');
        }
        return response()->json([
            'type' => 'error',
            'message' => 'District can not deleted.',
        ], 422);
    }
}
